// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	
	field Array string;
	field int curLength;
	field int maxL;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if(maxLength = 0){
		   let string = Array.new(1);
		}
		else {
		    let string = Array.new(maxLength);
		}

		let curLength = 0;
		let maxL = maxLength;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return curLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		if(j<maxL){
			return string[j];
		}
		else{
			return null;
		}
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		if(j<maxL){
			let string[j] = c;
			if (j > (curLength-1)){
				let curLength = j+1;
			}
		}
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if(curLength < maxL){
			let string[curLength]=c;
			let curLength = curLength+1;
		}
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let curLength = curLength -1;
		let string[curLength] = null;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int number;
		var int i;
		var int curChar;
		var int digit;
		var boolean negative;
		
		let number = 0;
		let i = 0;
		let curChar = string[0];
		
		
		if (curChar = 45){
			let negative = true;
			let curChar = string[1];
			let i = 1;

		}
		
		else {
			let negative = false;
		}
		
		
		while ((i < curLength) & (curChar > 47) & (curChar < 58)){
			let digit = curChar - 48;
			let number = (number * 10) +digit;
			
			let i = i + 1;
			let curChar = string[i];
		}
		if (negative){
			let number = -number;
		}
		return number;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int counter;
		let counter = 0;

		if (val < 0){
			let val = -val;
			let string[0] = 45;
			let counter = 1;
		}

		let curLength = setIntHelper(val, counter);
		return;			
    }
	
	method int setIntHelper(int val, int counter){
		var int lastDigit;
		var int c;
		
		let lastDigit = val - ((val/10) * 10);
		let c = lastDigit + 48;
		

		if (val < 10){
		    let string[counter] = c;
			return counter + 1;
		}

		else {
			let counter = setIntHelper(val/10, counter);
			let string[counter] = c;
			return counter+1;
		}
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;

    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
	}
}

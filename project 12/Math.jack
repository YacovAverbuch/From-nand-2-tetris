// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static int _temp_x_div;
	static Array two_power;
	
	
    /** Initializes the library. */
	    function void init() {
        var int cur_two;
        var int i;
        let cur_two = 1;
        let i = 0;
        let two_power = Array.new(16);
		
        while (i < 16){
            let two_power[i] = cur_two;
            let cur_two = cur_two + cur_two;
            let i = i + 1;
        }
		return;
    }


    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){ return -x; }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int i;
        let sum = 0;
        let i = 0;

        while(i < 16){
            if (y & two_power[i]){
                let sum = sum + x;
            }
            let x = x + x;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean to_neg;
		var int ans;
        
        let to_neg = false;
        if (y = 0){
            return 0;
        }

        if (y < 0){
            let y = - y;
            let to_neg = ~ to_neg;
        }
        if (x < 0){
            let x = - x;
            let to_neg = ~ to_neg;
        }
        let _temp_x_div = x;
        let ans = Math._div(y);
        if (to_neg){ let ans = - ans; }
        return ans;
    }

    function int _div(int y){
        var int q;
        if (_temp_x_div < y){
            return 0;
        }
        if (y < 0){  // y > 2^15
            return 0;
        }
		
        let q = Math._div(y + y);
        let q = q + q;
        if (_temp_x_div < y){
            return q;
        }
		let _temp_x_div = _temp_x_div - y;
        return q + 1;
    }






    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y;
        var int j;
   
        var int cur_two_power;
		var int cur_y_with_2p;
		
        let y = 0;
        let j = 7;
		
        while (j > -1){
 
            let cur_two_power = two_power[j];
			let cur_y_with_2p = (y + cur_two_power) * (y + cur_two_power);
            if ((~(cur_y_with_2p > x)) & (cur_y_with_2p > 0)){
                let y = y + cur_two_power;
            }
			let j = j - 1;
        }
        return y;
    }







    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b){
            return b;
        }
        return a;
    }
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	
	static boolean color;
	static Array moduluToPixel;

    /** Initializes the Screen. */
    function void init() {
		let color = true;
		let moduluToPixel = Array.new(16);
		let moduluToPixel[0] = 1;
		let moduluToPixel[1] = 2;
		let moduluToPixel[2] = 4;
		let moduluToPixel[3] = 8;
		let moduluToPixel[4] = 16;
		let moduluToPixel[5] = 32;
		let moduluToPixel[6] = 64;
		let moduluToPixel[7] = 128;
		let moduluToPixel[8] = 256;
		let moduluToPixel[9] = 512;
		let moduluToPixel[10] = 1024;
		let moduluToPixel[11] = 2048;
		let moduluToPixel[12] = 4096;
		let moduluToPixel[13] = 8192;
		let moduluToPixel[14] = 16384;
		let moduluToPixel[15] = 16384 + 16384;
		
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int address;
		let address = 16384;
		while (address < 24576){
			do Memory.poke(address, 0);
			let address = address+1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int address;
		var int curValue;
		var int newValue;
		var int pixel;
		let address = (32*y) + (x/16) + 16384;
		let curValue = Memory.peek(address);
		
		let pixel = moduluToPixel[x&15]; 		
		

		if (color){
			let newValue = pixel | curValue;
		}
		else{
			let newValue = (-1 -pixel) & curValue;			
		}
		do Memory.poke(address, newValue);
		return;
    }


    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int a;
		var int b;
		var int diff;
		
				
		if (x1 = x2){    /*vertical line*/
			if(y1<y2){
				let a = y1;
				let b = 0;
				let diff = y2-y1;
				}
			else{
				let a = y2;
				let b = 0;
				let diff = y1-y2;
			}				
			while(b < (diff+1)){
				do Screen.drawPixel(x1, a+b);
				let b = b+1;
			}
							
			return;
		}
		if (y1 = y2){          /*horizontal line*/

			if(x1<x2){
				let a = x1;
				let b = 0;
				let diff = x2-x1;
				}
			else{
				let a = x2;
				let b = 0;
				let diff = x1-x2;
			}				
			while(b < (diff+1)){
				do Screen.drawPixel(a+b, y1);
				let b = b+1;
			}

			return;
		}
		else{
			if ((x1<x2)&(y1<y2)){                   /*right-down diagonal*/
				do Screen.drawDiagonalRD(x1, y1, x2, y2);
				}
			if ((x1>x2)&(y1>y2)){                   /*left-up diagonal*/
				do Screen.drawDiagonalRD(x2, y2, x1, y1);
				}
			if ((x1<x2)&(y1>y2)){                   /*right-up diagonal*/
				do Screen.drawDiagonalRU(x1, y1, x2, y2);
				}
			if ((x1>x2)&(y1<y2)){                   /*left-down diagonal*/
				do Screen.drawDiagonalRU(x2, y2, x1, y1);
				}
			return;
		}
    }
	
	function void drawDiagonalRD(int x1, int y1, int x2, int y2) {

		var int a;
		var int b;
		var int diff;
		var int dx;
		var int dy;
		
		let a=0;
		let b=0;
				
		let dx = x2-x1;
		let dy = y2-y1;
		let diff = (b*dx) - (a*dy);
		
		while((a < (dx+1))&(b < (dy+1))){
			do Screen.drawPixel(x1+a,y1+b);
			if(diff < 0){
				let b = b+1;
				let diff = diff + dx;
			}else {
				let a = a+1;
				let diff = diff - dy;
			}
		}
		return;		
    }
	
	function void drawDiagonalRU(int x1, int y1, int x2, int y2) {
		var int a;
		var int b;
		var int diff;
		var int dx;
		var int dy;
		
		let a=0;
		let b=0;

		let dx = x2-x1;
		let dy = y1-y2;
		let diff =  (a*dy)-(b*dx);
		while((a < (dx+1))&(b < (dy+1))){
			do Screen.drawPixel(x1+a,y1- b);
			if(diff > 0){
				let b = b+1;
				let diff = diff - dx;
			}else {
				let a = a+1;
				let diff = diff + dy;
			}
		}
		return;		
    }
		

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {		
		while (y1<(y2+1)){
			do Screen.drawLine(x1,y1,x2,y1);
			let y1 = y1 +1;
		}		
		return;
    }

    
	/** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
 
    function void drawCircle(int x, int y, int r) {
		var int a;
		var int b;
		var int dx;
		var int dy;
		var int diff;
		var int r2;
		
		let r2 = 2 * r;
		let a = r-1;
		let b = 0;
		let dx = 1;
		let dy = 1;
		let diff = dx - r2;
		
		while (a > (b-1)){
			
			do Screen.drawLine(x - a, y + b,x + a, y + b);
			do Screen.drawLine(x - a, y - b, x + a, y - b);
			do Screen.drawLine(x - b, y + a,x + b, y + a);
			do Screen.drawLine(x - b, y - a, x + b, y - a);
			
			if(diff < 1){	
				let b = b+1;
				let diff = diff + dy;
				let dy = dy + 2;
			}
				
			if (diff > 0){
				let a = a - 1;
				let dx = dx + 2;
				let diff = diff + dx - r2;				
			}
		}
		return;
    }
}


